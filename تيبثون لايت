{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "<h1>Tepthon light / تيبثون لايت</h1>\n",
        "\n",
        "---\n",
        "\n",
        "![Tepthon session photo ](https://github.com/zxaax/0/blob/go/jmthon_light.jpg?raw=true)"
      ],
      "metadata": {
        "id": "MyRXkPTf8jjH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "---\n",
        "---\n",
        "\n",
        "<h1> معلومات عن الأداة </h1>\n",
        "\n",
        "--- ---\n",
        "<h4>\n",
        "أداة تقوم بتنصيب\n",
        "\n",
        "[سورس تيبثون](https://t.me/Tepthon/689)\n",
        "\n",
        "على حساب تلجرام الخاص بك\n",
        "\n",
        "يعمل السورس لمدة لا تتجاوز البضع ساعات\n",
        "\n",
        "على استضاقة\n",
        "\n",
        "```google Workspace```\n",
        "\n",
        "مع إمكانية إعادة تشغيلـه باي وقت\n",
        "\n",
        "```google``` السكربت آمن على حساب\n",
        "\n",
        "إذا كان استخدامك داخل الحد المعقول\n",
        "\n",
        "</h4>\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "_zUm70u09DVf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h1> لوازم تنصيب السورس </h1>\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        " ```أيبي_أيدي``` ➘\n",
        "\n",
        " ```أيبي_هاش```➙ [Tepthon.zxaax.dev](https://colab.research.google.com/github/Tepthonee/Deploy-C/blob/go/%D8%B3%D9%8A%D8%B4%D9%86%20%D9%83%D9%88%D8%AF#sandboxMode=true)\n",
        "\n",
        " ```سيشن_كود```➚\n",
        "\n",
        "---\n",
        "\n",
        " ```بوت_توكن``` ➙ [@botfather](botfather.t.me)\n",
        "\n",
        "---\n",
        "\n",
        " ```رابط_قاعدة_البيانات``` -➙ [redis.io](redis.io/try-free)\n",
        "\n",
        " ```باسورد_قاعدة_البيانات```➚\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "tlO5ZPpv9YF-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "بعد استخراج المتغيرات قم بتشغيل القسم التالي"
      ],
      "metadata": {
        "id": "I-hLtpwaYwCT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title قسم تعيين المتغيرات\n",
        "\n",
        "\"\"\"هذا هو الكود الأساسـي لا تقم بالتعديل عليه\"\"\"\n",
        "\n",
        "\"\"\"py moa_yad.t.me GitHub@moa-yad\"\"\"\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display\n",
        "\n",
        "session_code_input = widgets.Text(description=\"سيشن_كود :\")\n",
        "api_id_input = widgets.Text(description=\"ايبي_ايدي :\")\n",
        "api_hash_input = widgets.Text(description=\"ايبي_هاش :\")\n",
        "bot_token_input = widgets.Text(description=\"بوت_توكن :\")\n",
        "redis_url_input = widgets.Text(description=\"رابط_التخزين :\")\n",
        "redis_password_input = widgets.Text(description=\"الباسورد :\")\n",
        "env_stats = 0\n",
        "\n",
        "display(session_code_input)\n",
        "display(api_id_input)\n",
        "display(api_hash_input)\n",
        "display(bot_token_input)\n",
        "display(redis_url_input)\n",
        "display(redis_password_input)\n",
        "\n",
        "\n",
        "output = widgets.Output()\n",
        "display(output)\n",
        "\n",
        "def is_numeric(api_id):\n",
        "    return api_id.isnumeric()\n",
        "\n",
        "def confirm_input(b):\n",
        "    session = session_code_input.value\n",
        "    api_id = api_id_input.value\n",
        "    api_hash = api_hash_input.value\n",
        "    bot_token = bot_token_input.value\n",
        "    redis_url = redis_url_input.value\n",
        "    redis_password = redis_password_input.value\n",
        "\n",
        "    if session.strip() == '' or api_id.strip() == '' or api_hash.strip() == '' or bot_token.strip() == '' or redis_url.strip() == '' or redis_password.strip() == '' :\n",
        "        with output:\n",
        "            print(\"الرجاء ملء جميع أماكن الإدخال.\")\n",
        "    elif is_numeric(session):\n",
        "        with output:\n",
        "            print(\"خطأ، يجب أن يتكون السيشن كود من أرقام ورموز\")\n",
        "    elif is_numeric(api_hash):\n",
        "        with output:\n",
        "            print(\"خطأ، يجب أن يتكون الايبي هاش من أرقام ورموز\")\n",
        "    elif is_numeric(bot_token):\n",
        "        with output:\n",
        "            print(\"خطأ، يجب أن يتكون البوت توكن من أرقام ورموز\")\n",
        "    elif is_numeric(redis_url):\n",
        "        with output:\n",
        "            print(\"خطأ، يجب أن يتكون رابط قاعدة البيانات من أرقام ورموز\")\n",
        "    elif is_numeric(redis_password):\n",
        "        with output:\n",
        "            print(\"خطأ، يجب أن يتكون الباسورد من ارقام ورموز\")\n",
        "    elif not is_numeric(api_id):\n",
        "        with output:\n",
        "            print(\"خطأ، يجب أن يتكون الأيبي أيدي من أرقام فقط.\")\n",
        "    elif not api_hash.isalnum():\n",
        "        with output:\n",
        "            print(\"الايبي هاش يجب أن لا يحتوي على رموز أخرى غير الأحرف والأرقام.\")\n",
        "    elif redis_url.startswith('http'):\n",
        "        with output:\n",
        "            print(\"https://رابط قاعدة البيانات يجب ألّا يبدأ بـ\")\n",
        "    elif not redis_url.startswith('redis'):\n",
        "        with output:\n",
        "            print(\"redisرابط قاعدة البيانات يجب أن يبدأ بـ\")\n",
        "    elif not redis_url[-1].isdigit():\n",
        "        with output:\n",
        "            print(\"رابط قاعدة البيانات يجب أن ينتهي بارقام\")\n",
        "    elif not bot_token[0].isdigit():\n",
        "        with output:\n",
        "            print(\"يجب أن يبدأ بوت توكن بأرقام\")\n",
        "\n",
        "    else:\n",
        "        session_code_input.disabled = True\n",
        "        api_id_input.disabled = True\n",
        "        api_hash_input.disabled = True\n",
        "        bot_token_input.disabled = True\n",
        "        redis_url_input.disabled = True\n",
        "        redis_password_input.disabled = True\n",
        "        confirm_button.disabled = True\n",
        "        with output:\n",
        "            print(\"تم تأكيد المدخلات. لا يمكن تعديلها الآن.\")\n",
        "            print(\"من القسم التالي .env تستطيع حفظ المتغيرات بصيغة ملف\")\n",
        "\n",
        "confirm_button = widgets.Button(description=\"تأكيد الإدخال\")\n",
        "confirm_button.on_click(confirm_input)\n",
        "display(confirm_button)"
      ],
      "metadata": {
        "id": "1vxlfKkvYcFI",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "بعد تعيين المتغيرات يمكنك تشغيل السورس بشكل مباشر\n",
        "\n",
        "تستطيع أيضًا تحميلها\n",
        "\n",
        "بشكل ملف وحفظـه داخل جهازك\n",
        "\n",
        "لكي تستطيع رفعه بشكل مباشر\n",
        "\n",
        "وتخطي الخطوة السابقة\n",
        "\n",
        "وهذا قسم اختياري"
      ],
      "metadata": {
        "id": "iJhUZ17VY3Rr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title قسم تحميل ملف المتغيرات\n",
        "\n",
        "\"\"\"هذا هو الكود الأساسـي لا تقم بالتعديل عليه\"\"\"\n",
        "\n",
        "\"\"\"py moa_yad.t.me GitHub@moa-yad\"\"\"\n",
        "\n",
        "from google.colab import files\n",
        "\n",
        "try:\n",
        "    if None in (session_code_input.value, api_id_input.value, api_hash_input.value, bot_token_input.value, redis_url_input.value, redis_password_input.value):\n",
        "        print()\n",
        "except NameError:\n",
        "    pass\n",
        "    print(\"لم يتم تعيين المتغيرات\")\n",
        "    print(\"قم بتعيين المتغيرات وحأول مرة اخرى\")\n",
        "\n",
        "else:\n",
        "    env_content = f\"\"\"API_ID={api_id_input.value}\n",
        "API_HASH={api_hash_input.value}\n",
        "SESSION={session_code_input.value}\n",
        "BOT_TOKEN={bot_token_input.value}\n",
        "REDIS_URI={redis_url_input.value}\n",
        "REDIS_PASSWORD=f{redis_password_input.value}\n",
        "\"\"\"\n",
        "    with open('env', 'w') as file:\n",
        "        file.write(env_content)\n",
        "\n",
        "    print(\"تم إنشاء الملف.\")\n",
        "    print(\"! لا تقم بمشاركة هذا الملف مع اين من كأن\")\n",
        "    print(\"! يحتوي هذا الملف على معلومات مهمة\")\n",
        "    print(\"! صاحب هذا الملف يستطيع السيطرة على حسابك\")\n",
        "    files.download('env')"
      ],
      "metadata": {
        "id": "b3NKQ5ujaI7K",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "إذا كأن لديك نسخة من ملف المتغيرات\n",
        "\n",
        "يمكنك رفعه عبر القسم التالي\n",
        "\n",
        "وتخطي كل ما سبق"
      ],
      "metadata": {
        "id": "wuyc-yMSG-RV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title قسم رفع ملف المتغيرات\n",
        "\n",
        "\"\"\"هذا هو الكود الأساسـي لا تقم بالتعديل عليه\"\"\"\n",
        "\n",
        "\"\"\"py moa_yad.t.me GitHub@moa-yad\"\"\"\n",
        "\n",
        "import os\n",
        "from google.colab import files\n",
        "\n",
        "if os.path.exists(\"env\"):\n",
        "    print(\"...القديم env جاري حذف ملف\")\n",
        "    os.system(\"rm env\")\n",
        "\n",
        "print(\"env يرجى رفع ملف\")\n",
        "try:\n",
        "    uploaded = files.upload()\n",
        "    for fn in uploaded.keys():\n",
        "        if fn.startswith(\"env\") or fn == \".env\":\n",
        "            !mv '{fn}' env\n",
        "            print('بنجاح env تم رفع ملف')\n",
        "            env_stats = 1\n",
        "        else:\n",
        "            print('تم إلغاء العملية envيجب أن يبدأ الملف بـ')\n",
        "            os.remove(fn)\n",
        "\n",
        "except KeyboardInterrupt:\n",
        "    print(\"تم إلغاء عملية الرفع\")\n",
        "    print(\"قم برفع واحد env تم حذف ملف\")\n",
        "    print(\"أو قم بتعيين المتغيرات يدويًّا\")"
      ],
      "metadata": {
        "id": "_OY3s_PtGqj-",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "يمكنك تشغيل السورس عبر القسم التالي"
      ],
      "metadata": {
        "id": "ICVu0Z0CNDNj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title قسم تشغيل السورس\n",
        "\n",
        "\"\"\"هذا هو الكود الأساسي لا تقم بالتعديل عليه\"\"\"\n",
        "\n",
        "\"\"\"py moa_yad.t.me GitHub@moa-yad\"\"\"\n",
        "\n",
        "import os\n",
        "\n",
        "try:\n",
        "    API_ID = api_id_input.value if api_id_input.value else None\n",
        "    API_HASH = api_hash_input.value if api_hash_input.value else None\n",
        "    SESSION = session_code_input.value if session_code_input.value else None\n",
        "    BOT_TOKEN = bot_token_input.value if bot_token_input.value else None\n",
        "    REDIS_URI = redis_url_input.value if redis_url_input.value else None\n",
        "    REDIS_PASSWORD = redis_password_input.value if redis_password_input.value else None\n",
        "except NameError:\n",
        "    API_ID = None\n",
        "    API_HASH = None\n",
        "    SESSION = None\n",
        "    BOT_TOKEN = None\n",
        "    REDIS_URI = None\n",
        "    REDIS_PASSWORD = None\n",
        "\n",
        "try:\n",
        "    env_stats = [env_stats]\n",
        "except NameError:\n",
        "    pass\n",
        "    env_stats = None\n",
        "if not os.path.exists(\"Tepthon\"):\n",
        "    print(\"...جاري تحميل ملفات السورس\")\n",
        "    os.system(\"git clone https://github.com/tepthon-arabic/Tepthon Tepthon>> log 2>&1\")\n",
        "if not os.path.isfile(\"lib/packages.zip\"):\n",
        "    print(\"...جاري تحميل المكاتب\")\n",
        "    os.system(\"git clone -b lib https://github.com/zxaax/0 lib >> log 2>&1\")\n",
        "if not os.path.exists(\"Tepthon/ytdl\"):\n",
        "    print(\"...جاري فك الضغط\")\n",
        "    os.system(\"sudo unzip lib/packages.zip -d Tepthon >> log1\")\n",
        "    print(\"...جاري تثبيت المكاتب\")\n",
        "    os.system(\"cd Tepthon && sudo dpkg -i *.deb >> log2 2>&1 && sudo apt-get install -f >> log2 2>&1\")\n",        "\n",
        "def contains_value(value, target):\n",
        "    if isinstance(target, list):\n",
        "        return any(contains_value(value, item) for item in target)\n",
        "    return target == value\n",
        "\n",
        "def run():\n",
        "    try:\n",
        "        if None in (SESSION, API_ID, API_HASH, BOT_TOKEN, REDIS_URI, REDIS_PASSWORD) and contains_value(0, env_stats):\n",
        "            print(\"! لم يتم تعيين المتغيرات بشكل يدوي\")\n",
        "            print(\"! قسم تعيين المتغيرات فارغ قم بملء أماكن الإدخال\")\n",
        "        elif not None in (SESSION, API_ID, API_HASH, BOT_TOKEN, REDIS_URI, REDIS_PASSWORD) and contains_value(0, env_stats):\n",
        "            print(\"! تم تعيين المتغيرات بشكل يدوي\")\n",
        "            print(\"...env جاري إنشاء ملف\")\n",
        "            env_content = f\"\"\"API_ID={API_ID}\n",
        "API_HASH={API_HASH}\n",
        "SESSION={SESSION}\n",
        "BOT_TOKEN={BOT_TOKEN}\n",
        "REDIS_URI={REDIS_URI}\n",
        "REDIS_PASSWORD={REDIS_PASSWORD}\n",
        "\"\"\"\n",
        "            with open('env', 'w') as file:\n",
        "                file.write(env_content)\n",
        "\n",
        "            os.system(\"rm -rf ./Tepthon/.env && cp env ./Tepthon/.env\")\n",
        "            print(\"env تم تعيين ملف\")\n",
        "            !cd Tepthon && python -m Tepthon\n",
        "            return\n",
        "    except NameError:\n",
        "        pass\n",
        "        return\n",
        "    except AttributeError:\n",
        "        pass\n",
        "        return\n",
        "\n",
        "    if os.path.isfile(\"env\"):\n",
        "        print(\"env تم إيجاد ملف\")\n",
        "        os.system(\"rm -rf ./Tepthon/.env && cp env ./Tepthon/.env\")\n",
        "        print(\"env تم تعيين ملف\")\n",
        "        print(\"!....جاري بدأ التشغيل\")\n",
        "        print(\"---------------------\")\n",
        "        print(\"---------------------\")\n",
        "        !cd Tepthon && python -m Tepthon\n",
        "        return\n",
        "    elif not os.path.isfile(\"env\"):\n",
        "        print(\"env لم يتم إيجاد ملف\")\n",
        "\n",
        "run()"
      ],
      "metadata": {
        "id": "ad51kiGxNHbm",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h6>©moa-yad - Tepthon</h6>"
      ],
      "metadata": {
        "id": "Dxm_Lbs9mZ7j"
      }
    }
  ]
}
