{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "<h1>Tepthon Session / سيشن تيبثون</h1>\n",
        "\n",
        "---\n",
        "\n",
        "![Tepthon Session Photo ](https://github.com/zxaax/0/blob/go/photo.jpg?raw=true)"
      ],
      "metadata": {
        "id": "LIOfiQxgQtIS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "---\n",
        "---\n",
        "\n",
        "<h1>معلومات عن الأداة:</h1>\n",
        "\n",
        "--- ---\n",
        "<h4>\n",
        "أداة تقوم باستخراج كود السيشن\n",
        "\n",
        "الخاص بتنصيب سورس تيبثون باستعمال\n",
        "\n",
        "مكتبة\n",
        "\n",
        "```telethon & pyrogram```\n",
        "\n",
        "وعبر\n",
        "\n",
        "```google Workspace```\n",
        "\n",
        "</h4>\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "f84EoaE-jxYG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h1> الخطوات </h1>\n",
        "\n",
        "---\n",
        "```الخطوة الأولى``` : تقوم باستخراج أو استرجاع أيبي ايدي و أيبي هاش\n",
        "\n",
        "من الموقع الخاص\n",
        "[بالتلجرام](https://my.telegram.org/)\n",
        "\n",
        "أو من قسم الأيبيات\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "knqSxkch7V1U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title  قسم الأيبيات\n",
        "\n",
        "\"\"\"هذا هو الكود الأساسي لا تقم بالتعديل عليه\"\"\"\n",
        "\n",
        "\"\"\"py moa_yad.t.me GitHub@moa-yad\"\"\"\n",
        "\n",
        "import os\n",
        "\n",
        "import cv2\n",
        "\n",
        "import  urllib\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "import ipywidgets as widgets\n",
        "\n",
        "from IPython.display import display\n",
        "\n",
        "from google.colab.patches import cv2_imshow\n",
        "\n",
        "img = urllib.request.urlopen(\"https://github.com/Tepthonee/Deploy-C/blob/go/tgapp.jpg?raw=true\"); imgg = np.asarray(bytearray(img.read()), dtype=np.uint8); image = cv2.imdecode(imgg, cv2.IMREAD_COLOR); cv2_imshow(image)\n",
        "\n",
        "if not os.path.exists(\"tgapp\"):\n",
        "    os.system(\"git clone -b tgapp https://github.com/Tepthonee/Deploy-C.git tgapp > log 2>1\")\n",
        "\n",
        "app_shortname_input = widgets.Text(description=\"عنوان_التطبيق :\")\n",
        "phone_input = widgets.Text(description=\"رقم_الهاتف :\")\n",
        "\n",
        "display(phone_input)\n",
        "display(app_shortname_input)\n",
        "\n",
        "output = widgets.Output()\n",
        "display(output)\n",
        "\n",
        "def confirm_input(b):\n",
        "    app_shortname = app_shortname_input.value\n",
        "    phone = phone_input.value\n",
        "\n",
        "    if app_shortname.strip() == '' or phone.strip() == '':\n",
        "        with output:\n",
        "            print(\"الرجاء ملء جميع اماكن الإدخال.\")\n",
        "    elif not phone.startswith('+'):\n",
        "        with output:\n",
        "            print(\"رقم الهاتف خطأ، يجب أن يبدأ بـ '+'!؟؟\")\n",
        "    elif not phone.replace('+', '', 1).isdigit():\n",
        "        with output:\n",
        "            print(\"خطأ، رقم الهاتف يجب أن يحتوي على أرقام إنجليزية فقط.\")\n",
        "    elif phone.count('+') != 1:\n",
        "        with output:\n",
        "            print(\"خطأ، يجب أن يحتوي رقم الهاتف على رمز واحد '+' فقط.\")\n",
        "    elif app_shortname.isdigit():\n",
        "        with output:\n",
        "            print(\"خطأ، عنوان التطبيق يجب ان لا يتكون ارقام فقط.\")\n",
        "    elif not all(char.isalnum() or char in set(\"-._@\") for char in app_shortname):\n",
        "        with output:\n",
        "            print(\"غير مسموح بالرموز الخاصة داخل عنوان التطبيق.\")\n",
        "            print(\"يمكن استخدام الارقام و الاحرف الأبجدية\")\n",
        "            print(\"وبعض الرموز - و _ و . و @ فقط.\")\n",
        "    elif not 5 <= len(app_shortname) <= 32:\n",
        "        with output:\n",
        "            print(\"يجب ان يكون عنوان التطبيق بين 5 و 32 رمز.\")\n",
        "    else:\n",
        "        app_shortname_input.disabled = True\n",
        "        phone_input.disabled = True\n",
        "        with output:\n",
        "            print(\"تم تأكيد المدخلات. لا يمكن تعديلها الآن. \\n\\n\")\n",
        "            !python tgapp/main.py {app_shortname} {phone}\n",
        "\n",
        "app_shortname_input.on_submit(confirm_input)"
      ],
      "metadata": {
        "cellView": "form",
        "id": "ILsufo2YTtkh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "---\n",
        "``` الخطوة الثانية``` : تقوم بتشغيل القسم الخاص بتعيين المتغيرات\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "04D5b7JGUQRf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title قسم تعيين المتغيرات\n",
        "\n",
        "\"\"\"هذا هو الكود الأساسي لا تقم بالتعديل عليه\"\"\"\n",
        "\n",
        "\"\"\"py moa_yad.t.me GitHub@moa-yad\"\"\"\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display\n",
        "\n",
        "session_ide_set = widgets.Dropdown(options=['بايروجرام', 'تيليثون'], value=None, description=\"نوع_السيشن:\")\n",
        "api_id_input = widgets.Text(description=\"أيبي_أيدي :\")\n",
        "api_hash_input = widgets.Text(description=\"أيبي_هاش :\")\n",
        "phone_input = widgets.Text(description=\"رقم_الهاتف :\")\n",
        "\n",
        "display(session_ide_set)\n",
        "display(api_id_input)\n",
        "display(api_hash_input)\n",
        "display(phone_input)\n",
        "\n",
        "output = widgets.Output()\n",
        "display(output)\n",
        "\n",
        "def is_numeric(api_id):\n",
        "    return api_id.isnumeric()\n",
        "\n",
        "def confirm_input(b):\n",
        "    session = session_ide_set.value\n",
        "    api_id = api_id_input.value\n",
        "    api_hash = api_hash_input.value\n",
        "    phone = phone_input.value\n",
        "\n",
        "    if session is None or api_id.strip() == '' or api_hash.strip() == '' or phone.strip() == '':\n",
        "        with output:\n",
        "            print(\"الرجاء ملء جميع اماكن الإدخال.\")\n",
        "    elif not phone.startswith('+'):\n",
        "        with output:\n",
        "            print(\"رقم الهاتف خطأ، يجب أن يبدأ بـ '+'!؟؟\")\n",
        "    elif not phone.replace('+', '', 1).isdigit():\n",
        "        with output:\n",
        "            print(\"خطأ، رقم الهاتف يجب أن يحتوي على أرقام إنجليزية فقط.\")\n",
        "    elif phone.count('+') != 1:\n",
        "        with output:\n",
        "            print(\"خطأ، يجب أن يحتوي رقم الهاتف على رمز واحد '+' فقط.\")\n",
        "    elif not is_numeric(api_id):\n",
        "        with output:\n",
        "            print(\"خطأ، يجب أن يتكون الايبي ايدي من أرقام فقط.\")\n",
        "    elif not api_hash.isalnum():\n",
        "        with output:\n",
        "            print(\"الايبي هاش يجب أن لا يحتوي على رموز أخرى غير الأحرف والأرقام.\")\n",
        "\n",
        "    else:\n",
        "        session_ide_set.disabled = True\n",
        "        api_id_input.disabled = True\n",
        "        api_hash_input.disabled = True\n",
        "        phone_input.disabled = True\n",
        "        confirm_button.disabled = True\n",
        "        with output:\n",
        "            print(\"تم تأكيد المدخلات. لا يمكن تعديلها الآن.\")\n",
        "\n",
        "confirm_button = widgets.Button(description=\"تأكيد الإدخال\")\n",
        "confirm_button.on_click(confirm_input)\n",
        "display(confirm_button)"
      ],
      "metadata": {
        "id": "zKiQXUbuwx9T",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "---\n",
        "بعد تعيين المتغيرات بنجاح\n",
        "\n",
        "تنتقل إلى الخطوة الثالثة\n",
        "\n",
        "---\n",
        "```الخطوة الثالثة``` : تقوم بتشغيل القسم الخاص باستخراج السيشن\n",
        "\n",
        "---"
      ],
      "metadata": {
        "id": "OjMwjpGqIUqi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title قسم استخراج السيشن\n",
        "\n",
        "\"\"\"هذا هو الكود الأساسي لا تقم بالتعديل عليه\"\"\"\n",
        "\n",
        "\"\"\"py moa_yad.t.me GitHub@moa-yad\"\"\"\n",
        "\n",
        "import os\n",
        "\n",
        "import cv2\n",
        "\n",
        "import urllib\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "from google.colab.patches import cv2_imshow\n",
        "\n",
        "img = urllib.request.urlopen(\"https://github.com/Tepthonee/Deploy-C/blob/go/photo.jpg?raw=true\"); imgg = np.asarray(bytearray(img.read()), dtype=np.uint8); image = cv2.imdecode(imgg, cv2.IMREAD_COLOR); cv2_imshow(image)\n",
        "\n",
        "try:\n",
        "    session = session_ide_set.value\n",
        "    if session is None:\n",
        "        print(\"لم يتم تحديد نوع السيشن.\")\n",
        "except NameError:\n",
        "    pass\n",
        "    print(\"لم يتم تحديد نوع السيشن.\")\n",
        "    session = None\n",
        "\n",
        "try:\n",
        "    api_id = api_id_input.value\n",
        "    os.environ[\"apiid\"] = api_id\n",
        "except NameError:\n",
        "    pass\n",
        "\n",
        "try:\n",
        "    api_hash = api_hash_input.value\n",
        "    os.environ[\"apihash\"] = api_hash\n",
        "\n",
        "except NameError:\n",
        "    pass\n",
        "\n",
        "try:\n",
        "    phone= phone_input.value\n",
        "    os.environ[\"phone\"] = phone\n",
        "except NameError:\n",
        "    pass\n",
        "\n",
        "if os.path.isfile(\"0/session.session\"):\n",
        "    os.system(\"rm 0/session.session\")\n",
        "\n",
        "if session == \"تيليثون\" and os.path.exists(\"0/pyrogram\"):\n",
        "    os.system(\"rm -rf 0\")\n",
        "    os.system(\"git clone -b telethon https://github.com/tepthon-arabic/Colab.git > log 2>1\")\n",
        "    !python 0/main.py\n",
        "elif session == \"بايروجرام\" and os.path.exists(\"0/telethon\"):\n",
        "    os.system(\"rm -rf 0\")\n",
        "    os.system(\"git clone -b pyrogram https://github.com/tepthon-arabic/Cloab.git > log 2>1\")\n",
        "    !python 0/main.py\n",
        "elif session == \"تيليثون\" and os.path.exists(\"0/telethon\"):\n",
        "    !python 0/main.py\n",
        "elif session == \"بايروجرام\" and os.path.exists(\"0/pyrogram\"):\n",
        "    !python 0/main.py\n",
        "else:\n",
        "     if session == \"تيليثون\":\n",
        "         os.system(\"git clone -b telethon https://github.com/tepthon-arabic/Colab.git > log 2>1\")\n",
        "         !python Deploy-C/main.py\n",
        "     elif session == \"بايروجرام\":\n",
        "         os.system(\"git clone -b pyrogram https://github.com/tepthon-arabic/Colab.git > log 2>1\")\n",
        "         !python Deploy-C/main.py"
      ],
      "metadata": {
        "id": "hMJejgbw_C1X",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<h6>©moa-yad - Tepthon</h6>"
      ],
      "metadata": {
        "id": "EBqU5iFJvyjv"
      }
    }
  ]
}
